---
- name: Assert unit_name provided
  assert:
    that:
      - unit_name | length > 0
    fail_msg: "unit_name is required (e.g., cntlm.service)."

- name: Compute scope flag and user home
  set_fact:
    _is_system_scope: "{{ (unit_scope | default('system')) == 'system' }}"
    _user_home_dir: >-
      {{
        ansible_user_dir
        | default(ansible_env.HOME, true)
        | default(lookup('env','HOME'), true)
      }}

- name: Compute unit base dir
  set_fact:
    _unit_dir: >-
      {{
        '/etc/systemd/system'
        if _is_system_scope else
        (_user_home_dir ~ '/.config/systemd/user')
      }}

- name: Compute drop-in dir
  set_fact:
    _dropin_dir: "{{ _unit_dir ~ '/' ~ unit_name ~ '.d' }}"

- name: "debug"
  debug:
    msg: "{{ _dropin_dir }}"

# === Absent path ===
- name: Stop/disable/mask unit when unit_present == false
  when: not unit_present
  block:
    - name: Stop & disable (and unmask) unit if exists
      systemd:
        name: "{{ unit_name }}"
        state: stopped
        enabled: false
        masked: false
        scope: "{{ unit_scope }}"
      failed_when: false
      become: "{{ unit_scope == 'system' }}"

    - name: Remove drop-ins directory
      file:
        path: "{{ _dropin_dir }}"
        state: absent
      become: "{{ unit_scope == 'system' }}"

    - name: Remove unit file
      file:
        path: "{{ _unit_dir }}/{{ unit_name }}"
        state: absent
      become: "{{ unit_scope == 'system' }}"
      notify: daemon reload

    - name: Remove environment file if defined
      when: unit_envfile_path | length > 0
      file:
        path: "{{ unit_envfile_path }}"
        state: absent
      become: "{{ unit_scope == 'system' }}"

    - name: End early
      meta: end_play

# === Present path ===
- name: Ensure unit directory exists
  file:
    path: "{{ _unit_dir }}"
    state: directory
    mode: "0755"
  become: "{{ unit_scope == 'system' }}"

- name: Place environment file (if provided)
  when: unit_envfile_path | length > 0 and unit_envfile_content | length > 0
  copy:
    dest: "{{ unit_envfile_path }}"
    content: "{{ unit_envfile_content }}"
    owner: root
    group: root
    mode: "0644"
  become: "{{ unit_scope == 'system' }}"
  register: _envfile_result

- name: Render unit file from inline content
  when: unit_content | length > 0
  copy:
    dest: "{{ _unit_dir }}/{{ unit_name }}"
    content: "{{ unit_content }}"
    owner: root
    group: root
    mode: "0644"
  become: "{{ unit_scope == 'system' }}"
  register: _unit_result
  notify: daemon reload

- name: Render unit file from template
  when: unit_content | length == 0 and unit_template_src | length > 0
  template:
    src: "{{ unit_template_src }}"
    dest: "{{ _unit_dir }}/{{ unit_name }}"
    owner: root
    group: root
    mode: "0644"
  become: "{{ unit_scope == 'system' }}"
  register: _unit_result
  notify: daemon reload

- name: Copy unit file from controller path
  when: unit_content | length == 0 and unit_template_src | length == 0 and unit_src_path | length > 0
  copy:
    src: "{{ unit_src_path }}"
    dest: "{{ _unit_dir }}/{{ unit_name }}"
    owner: root
    group: root
    mode: "0644"
  become: "{{ unit_scope == 'system' }}"
  register: _unit_result
  notify: daemon reload

- name: Ensure drop-in directory
  when: unit_dropins | length > 0
  file:
    path: "{{ _dropin_dir }}"
    state: directory
    mode: "0755"
  become: "{{ unit_scope == 'system' }}"

- name: Place drop-ins
  when: unit_dropins | length > 0
  copy:
    dest: "{{ _dropin_dir }}/{{ item.name }}"
    content: "{{ item.content }}"
    owner: root
    group: root
    mode: "0644"
  loop: "{{ unit_dropins }}"
  become: "{{ unit_scope == 'system' }}"
  register: _dropins_result
  notify: daemon reload

- name: Optionally validate unit with systemd-analyze verify
  when:
    - unit_validate_with_systemd_analyze
    - (_unit_result is defined and _unit_result.changed) or
      (_dropins_result is defined and _dropins_result.changed) or
      (_envfile_result is defined and _envfile_result.changed)
  command: "systemd-analyze verify {{ _unit_dir }}/{{ unit_name }}"
  changed_when: false
  become: "{{ unit_scope == 'system' }}"

- name: Enable/Mask unit
  systemd:
    name: "{{ unit_name }}"
    enabled: "{{ unit_enabled }}"
    masked: "{{ unit_masked }}"
    scope: "{{ unit_scope }}"
    daemon_reload: true
  become: "{{ unit_scope == 'system' }}"

- name: Start/Reload/Restart unit if requested
  when: unit_state is not none
  systemd:
    name: "{{ unit_name }}"
    state: >-
      {{
        (unit_restart_on_change and (
          (_unit_result is defined and _unit_result.changed) or
          (_dropins_result is defined and _dropins_result.changed) or
          (_envfile_result is defined and _envfile_result.changed)
        )) | ternary('restarted', unit_state)
      }}
    scope: "{{ unit_scope }}"
  become: "{{ unit_scope == 'system' }}"
