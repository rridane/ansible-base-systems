---
# ========================= ABSENT =========================
- name: "Containerd | Remove"
  when: containerd_state == 'absent'
  become: true
  block:
    - name: "Stop & disable service"
      ansible.builtin.systemd:
        name: containerd
        state: stopped
        enabled: false
      failed_when: false

    - name: "Remove containerd package"
      ansible.builtin.apt:
        name: containerd.io
        state: absent
        update_cache: true

    - name: "Remove config directories"
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/containerd
        - "{{ containerd_registry_config_path }}"
        - /etc/systemd/system/containerd.service.d

    - name: "systemd daemon-reload (after removals)"
      ansible.builtin.systemd:
        daemon_reload: true

# ========================= PRESENT =========================
- name: "Containerd | Install & configure"
  when: containerd_state == 'present'
  become: true
  block:
    # Assure le dossier keyrings
    - name: "Ensure keyrings dir exists"
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: "0755"

    # Paquets utiles pour télécharger et dearmer
    - name: "Install deps to handle key (curl/gnupg/ca-certificates)"
      ansible.builtin.apt:
        name:
          - curl
          - gnupg
          - ca-certificates
        state: present
        update_cache: true

    - name: "Download Docker GPG key (ASCII armor)"
      ansible.builtin.command: >
        curl -L --fail --show-error
        -o /etc/apt/keyrings/docker.asc
        https://download.docker.com/linux/ubuntu/gpg
      args:
        creates: /etc/apt/keyrings/docker.asc
      become: yes

    # Dearmor -> .gpg (évite apt-key)
    - name: "Dearmor Docker key"
      ansible.builtin.command:
        cmd: "gpg --dearmor -o /etc/apt/keyrings/docker.gpg /etc/apt/keyrings/docker.asc"
      args:
        creates: /etc/apt/keyrings/docker.gpg

    # Détecte arch et vendor pour composer la ligne du dépôt correctement
    - name: "Set repo facts"
      ansible.builtin.set_fact:
        _repo_arch: "{{ 'arm64' if ansible_architecture in ['aarch64','arm64'] else 'amd64' }}"
        _repo_vendor: "{{ 'debian' if ansible_facts.os_family == 'Debian' and ansible_facts.distribution == 'Debian' else 'ubuntu' }}"
        _repo_codename: "{{ ansible_facts.distribution_release }}"

    # Ajoute le dépôt Docker (utilisé pour containerd)
    - name: "Add Docker APT repo (for containerd)"
      ansible.builtin.apt_repository:
        repo: >-
          deb [arch={{ _repo_arch }} signed-by=/etc/apt/keyrings/docker.gpg]
          https://download.docker.com/linux/{{ _repo_vendor }} {{ _repo_codename }} stable
        filename: docker
        state: present
        update_cache: true

    - name: "Install containerd.io"
      ansible.builtin.apt:
        name: "containerd.io{{ ('=' + containerd_version) if containerd_version | length > 0 else '' }}"
        state: present
        update_cache: true
        allow_downgrade: true

    - name: "Ensure config directories exist"
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - /etc/containerd
        - "{{ containerd_registry_config_path }}"
        - /etc/systemd/system/containerd.service.d
        - "{{ containerd_root | dirname }}"

    # On génère un config minimal (pas besoin de 'containerd config default')
    - name: "Write /etc/containerd/config.toml (minimal)"
      ansible.builtin.template:
        src: config.toml.j2
        dest: /etc/containerd/config.toml
        mode: "0644"
      notify: restart containerd

    - name: "Ensure per-registry dir exists"
      vars:
        registry_dir: "{{ containerd_registry_config_path }}/{{ registry.host }}{{ (':' ~ registry.port) if (registry.port | default('')) else '' }}"
      ansible.builtin.file:
        path: "{{ registry_dir }}"
        state: directory
        mode: "0755"
      loop: "{{ containerd_registries }}"
      loop_control:
        loop_var: registry

    # Fichiers hosts.toml par registry (même registry_dir que ci-dessus)
    - name: "Create hosts.toml per registry"
      vars:
        registry_dir: "{{ containerd_registry_config_path }}/{{ registry.host }}{{ (':' ~ registry.port) if (registry.port | default('')) else '' }}"
      ansible.builtin.template:
        src: hosts.toml.j2
        dest: "{{ registry_dir }}/hosts.toml"
        mode: "0644"
      loop: "{{ containerd_registries }}"
      loop_control:
        loop_var: registry

    - name: "Ensure containerd enabled & started"
      ansible.builtin.systemd:
        name: containerd
        enabled: true
        state: started

    - name: Ensure containerd drop-in dir exists
      ansible.builtin.file:
        path: "{{ containerd_proxy_dropin_path }}"
        state: directory
        mode: "0755"
      become: true

    # Écrit le drop-in si AU MOINS une variable est renseignée
    - name: Write containerd proxy drop-in
      ansible.builtin.template:
        src: http-proxy.conf.j2
        dest: "{{ containerd_proxy_dropin_path }}/{{ containerd_proxy_dropin_file }}"
        mode: "0644"
      when:
        - (containerd_proxy_http  | length) > 0
          or (containerd_proxy_https | length) > 0
          or (containerd_no_proxy | length) > 0
      notify: restart containerd
      become: true

    # Sinon, supprime le drop-in (désactivé = valeurs vides)
    - name: Remove containerd proxy drop-in when everything is empty
      ansible.builtin.file:
        path: "{{ containerd_proxy_dropin_path }}/{{ containerd_proxy_dropin_file }}"
        state: absent
      when:
        - (containerd_proxy_http  | length) == 0
          and (containerd_proxy_https | length) == 0
          and (containerd_no_proxy | length) == 0
      notify: restart containerd
      become: true

