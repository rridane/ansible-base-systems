---
# ========================= ABSENT =========================
- name: "Containerd | Remove"
  when: containerd_state == 'absent'
  become: true
  block:
    - name: "Stop & disable service"
      ansible.builtin.systemd:
        name: containerd
        state: stopped
        enabled: false
      failed_when: false

    - name: "Remove containerd package"
      ansible.builtin.apt:
        name: containerd.io
        state: absent
        update_cache: true

    - name: "Remove config directories"
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/containerd
        - "{{ containerd_registry_config_path }}"
        - /etc/systemd/system/containerd.service.d

# ========================= PRESENT =========================
- name: "Containerd | Install & configure"
  when: containerd_state == 'present'
  become: true
  block:
    - name: "Ensure keyrings dir exists"
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: "0755"

    - name: "Add Docker APT key (for containerd)"
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        keyring: /etc/apt/keyrings/docker.gpg
        state: present

    - name: "Add Docker APT repo"
      ansible.builtin.apt_repository:
        repo: >
          deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg]
          https://download.docker.com/linux/ubuntu focal stable
        filename: docker
        state: present
        update_cache: true

    - name: "Install containerd.io"
      ansible.builtin.apt:
        name: "containerd.io{{ ('=' + containerd_version) if containerd_version | length > 0 else '' }}"
        state: present
        update_cache: true
        allow_downgrade: true

    - name: "Ensure config directories exist"
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - /etc/containerd
        - "{{ containerd_registry_config_path }}"
        - /etc/systemd/system/containerd.service.d
        - "{{ containerd_root | dirname }}"

    # On génère un config minimal (pas besoin de 'containerd config default')
    - name: "Write /etc/containerd/config.toml (minimal)"
      ansible.builtin.template:
        src: config.toml.j2
        dest: /etc/containerd/config.toml
        mode: "0644"

    # Définition des registries via hosts.toml dédiés
    - name: "Create hosts.toml per registry"
      ansible.builtin.template:
        src: hosts.toml.j2
        dest: "{{ containerd_registry_config_path }}/{{ registry.host }}:{{ registry.port }}/hosts.toml"
        mode: "0644"
      loop: "{{ containerd_registries }}"
      loop_control:
        loop_var: registry

    - name: "Configure systemd proxy (optional)"
      when: containerd_proxy | length > 0
      ansible.builtin.template:
        src: http-proxy.conf.j2
        dest: /etc/systemd/system/containerd.service.d/http-proxy.conf
        mode: "0644"

    - name: "Daemon-reload"
      ansible.builtin.systemd:
        daemon_reload: true

    - name: "Enable & restart containerd"
      ansible.builtin.systemd:
        name: containerd
        enabled: true
        state: restarted
