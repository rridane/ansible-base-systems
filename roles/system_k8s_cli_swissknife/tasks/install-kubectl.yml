# ------------------------------- ABSENT ---------------------------------------
- name: "kubectl | Remove (absent)"
  become: true
  when: (tools.kubectl | default({'enabled':true})).enabled | bool == false
  ansible.builtin.apt:
    name: kubectl
    state: absent
    update_cache: true

# ------------------------------- PRESENT --------------------------------------
- name: "kubectl | Install (present)"
  become: true
  when: (tools.kubectl | default({'enabled':true})).enabled | bool
  block:

    # 0) Résoudre la version cible (stable si vide)
    - name: kubectl | Fetch latest stable version when not specified
      ansible.builtin.uri:
        url: https://dl.k8s.io/release/stable.txt
        return_content: true
      register: _stable
      when: (tools.kubectl.version | default('') | length) == 0

    - name: kubectl | Set target version fact
      ansible.builtin.set_fact:
        _kubectl_version: >-
          {{ tools.kubectl.version
             if (tools.kubectl.version | default('') | length) > 0
             else (_stable.content | trim) }}

    # 1) Déduire la série (vX.Y) en interne pour pkgs.k8s.io
    - name: kubectl | Compute series from version
      ansible.builtin.set_fact:
        _kubectl_series: "{{ _kubectl_version | regex_replace('^v?([0-9]+\\.[0-9]+).*', 'v\\1') }}"

    # 2) Pré-requis APT
    - name: Ensure base packages for APT over HTTPS and gpg exist
      ansible.builtin.apt:
        name:
          - ca-certificates
          - gnupg
        state: present
        update_cache: true

    - name: Ensure /etc/apt/keyrings exists
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: "0755"

    # 3) Clé + dépôt pkgs.k8s.io (utilise la série déduite)
    - name: Download Kubernetes Release.key
      ansible.builtin.get_url:
        url: "https://pkgs.k8s.io/core:/stable:/{{ _kubectl_series }}/deb/Release.key"
        dest: /etc/apt/keyrings/kubernetes-release.key
        mode: "0644"

    - name: Dearmor Release.key into keyring
      ansible.builtin.command: >
        gpg --dearmor --yes
        --output /etc/apt/keyrings/kubernetes-archive-keyring.gpg
        /etc/apt/keyrings/kubernetes-release.key
      args:
        creates: /etc/apt/keyrings/kubernetes-archive-keyring.gpg

    - name: Ensure keyring is readable by _apt
      ansible.builtin.file:
        path: /etc/apt/keyrings/kubernetes-archive-keyring.gpg
        mode: "0644"

    - name: Add Kubernetes APT repository (pkgs.k8s.io)
      ansible.builtin.apt_repository:
        repo: >-
          deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg]
          https://pkgs.k8s.io/core:/stable:/{{ _kubectl_series }}/deb/ /
        filename: "kubernetes-{{ _kubectl_series }}"
        state: present
        update_cache: true

    # 4) Installer kubectl ÉPINGLÉ à la version résolue (stable si vide au départ)
    # 4) Résoudre la version APT exacte si on a demandé une version
    - name: kubectl | Compute base semver without leading 'v'
      ansible.builtin.set_fact:
        _kubectl_base: "{{ _kubectl_version | regex_replace('^v','') }}"
      when: _kubectl_version | length > 0

    - name: kubectl | Resolve full APT version for pin
      ansible.builtin.shell: |
        set -euo pipefail
        apt-cache madison kubectl | awk '{print $3}' | grep -E '^{{ _kubectl_base }}' | head -n1
      args:
        warn: false
      register: _kubectl_fullver_sh
      changed_when: false
      failed_when: false
      when: _kubectl_version | length > 0

    - name: kubectl | Set full APT version fact (may be empty)
      ansible.builtin.set_fact:
        _kubectl_fullver: "{{ (_kubectl_fullver_sh.stdout | default('')) | trim }}"
      when: _kubectl_version | length > 0

    # 5) Installer : pin si on a trouvé la version exacte, sinon sans pin
    - name: Install kubectl (pin if resolvable, else latest in series)
      ansible.builtin.apt:
        name: "{{ 'kubectl=' ~ _kubectl_fullver if (_kubectl_fullver | default('') | length) > 0 else 'kubectl' }}"
        state: present
        update_cache: false
        allow_downgrade: true
#
#    - name: Install kubectl (pinned to target version)
#      ansible.builtin.apt:
#        name: "kubectl={{ _kubectl_version }}"
#        state: present
#        update_cache: false
#        allow_downgrade: true
