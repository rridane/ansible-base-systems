---
- name: "Kube Cleanup | Pre-checks & confirmation"
  when: kube_cleanup_enabled | bool
  become: true
  block:

    - name: Detect control-plane by apiserver manifest
      ansible.builtin.stat:
        path: /etc/kubernetes/manifests/kube-apiserver.yaml
      register: _apiserver_manifest

    - name: Flag control-plane
      ansible.builtin.set_fact:
        _is_control_plane: "{{ _apiserver_manifest.stat.exists | bool }}"

    - name: Ask for confirmation (interactive) if needed
      when:
        - kube_ask_confirmation | bool
        - (kube_cleanup_ack | length) == 0
      ansible.builtin.pause:
        prompt: |-
          ⚠️ Nettoyage Kubernetes DESTRUCTIF sur {{ inventory_hostname }}{{ ' (CONTROL PLANE)' if _is_control_plane else '' }}
          - kubeadm reset --force (CRI={{ kube_cri_socket }})
          - purge paquets kube (si activé)
          - suppression CNI (si activé)
          - cleanup Calico (si activé)
          Tape "{{ kube_cleanup_ack_expected }}" pour confirmer :
      register: _confirm

    - name: Normalize ack
      ansible.builtin.set_fact:
        kube_cleanup_ack: >-
          {{
            (kube_cleanup_ack | default('') | string) |
            default(_confirm.user_input | default(''), true)
          }}

    - name: Guard — require explicit confirmation
      ansible.builtin.assert:
        that:
          - (kube_cleanup_ack | lower) == (kube_cleanup_ack_expected | lower)
        fail_msg: >-
          Annulé : confirmation manquante/invalide (attendu "{{ kube_cleanup_ack_expected }}").

- name: "Kube Cleanup | kubeadm reset"
  when: kube_cleanup_enabled | bool
  become: true
  ansible.builtin.command: >
    kubeadm reset --force --cri-socket={{ kube_cri_socket }}
  register: _reset
  failed_when: false
  changed_when: _reset.rc == 0

- name: "Kube Cleanup | Remove Kubernetes packages (APT)"
  when:
    - kube_cleanup_enabled | bool
    - kube_cleanup_packages | bool
  become: true
  ansible.builtin.apt:
    name:
      - kubeadm
      - kubelet
      - kubectl
    state: absent
    update_cache: true

- name: "Kube Cleanup | Remove CNI config directory"
  when:
    - kube_cleanup_enabled | bool
    - kube_cleanup_cni | bool
  become: true
  ansible.builtin.file:
    path: /etc/cni/net.d
    state: absent

- name: "Kube Cleanup | Down known CNI interfaces (best effort)"
  when:
    - kube_cleanup_enabled | bool
    - kube_cleanup_cni | bool
  become: true
  ansible.builtin.command: ip link set {{ item }} down
  loop: "{{ kube_cni_interfaces_down }}"
  failed_when: false
  changed_when: false

- name: "Kube Cleanup | Delete known CNI interfaces (best effort)"
  when:
    - kube_cleanup_enabled | bool
    - kube_cleanup_cni | bool
  become: true
  ansible.builtin.command: ip link delete {{ item }}
  loop: "{{ kube_cni_interfaces_down }}"
  failed_when: false
  changed_when: false

- name: "Kube Cleanup | Calico specific cleanup (files/bins/state)"
  when:
    - kube_cleanup_enabled | bool
    - kube_cleanup_calico | bool
  become: true
  block:
    - name: Remove Calico CNI conf files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop: "{{ kube_calico_cni_conf_files }}"

    - name: Remove Calico CNI binaries
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop: "{{ kube_calico_cni_bins }}"

    - name: Remove CNI/Calico state directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop: "{{ kube_cleanup_state_dirs }}"

    - name: Delete veth interfaces starting with 'cali' (best effort)
      ansible.builtin.shell: |
        set -e
        for i in $(ip -o link show | awk -F': ' '/^[0-9]+: cali/{print $2}'); do
          ip link delete "$i" || true
        done
      args:
        executable: /bin/bash
      changed_when: false
      failed_when: false

    - name: Flush cali-* iptables chains (filter,nat,mangle) (best effort)
      ansible.builtin.shell: |
        set -e
        for table in filter nat mangle; do
          for ch in $(iptables -t $table -S | awk '/-N cali-/{print $2}'); do
            while iptables -t $table -S | grep -q "\-A .* ${ch}\b" ; do
              iptables -t $table -D $(iptables -t $table -S | awk -v c="$ch" '$0 ~ "-A "c {sub(/^-A /,""); print; exit}')
            done
            iptables -t $table -F ${ch} || true
            iptables -t $table -X ${ch} || true
          done
        done
      args:
        executable: /bin/bash
      changed_when: false
      failed_when: false
